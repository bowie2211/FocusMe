Ich möchte mit pySide ein interaktives Kanbanboard aufbauen.
Es gibt 3 Board Element: backlog, in progress und done.
In jedem Board Element soll es mölich sein per Mausklick eine Taks hinzuzufügen.
Die Hinzugefügte Taks soll wiederum als interaktives Element angezeigt werden.
Es muss möglich sein, eine Task von einem Boardspalte in eine andere per drag and drop zu verschieben.
Dabei muss die Task aus der Quellspalte gelöscht und in die neue Spalte eingefügt werden.
Wenn man auf eine Tasks klickt muss ein Eigenschaftenfenster geööfnet werden, in dem folgende eigenschaften der Task angezeigt werden:
Taskname  Type: String
Estimated_Pomos Type:intger
Date_to_Perform Type: dd.mm.yyyy
Repeat Type: Enum never, day, week, month
Assinged_to_project Type: String
Tag Type: String
Subtaks Type:String

Hier ist ein interaktives Kanban-Board, das in **Python** mit **PyQt6** implementiert wird. Das Board besteht aus drei Spalten: *Backlog*, *In Progress* und *Done*. Aufgaben können durch Drag-and-Drop zwischen den Spalten verschoben werden und neue Aufgaben können per Button hinzugefügt werden.

---

### **Python Code**

```python
import sys
from PyQt6.QtWidgets import (
    QApplication, QWidget, QVBoxLayout, QHBoxLayout,
    QLabel, QListWidget, QPushButton, QInputDialog, QListWidgetItem
)
from PyQt6.QtCore import Qt


class KanbanBoard(QWidget):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("Kanban Board")
        self.resize(800, 400)
        self.setup_ui()

    def setup_ui(self):
        # Hauptlayout
        main_layout = QVBoxLayout(self)

        # Board-Spalten
        backlog_layout = self.create_column("Backlog", self.add_task_to_backlog)
        in_progress_layout = self.create_column("In Progress", self.add_task_to_in_progress)
        done_layout = self.create_column("Done", self.add_task_to_done)

        # Zugriff auf die Listen
        self.backlog_list = backlog_layout[1]
        self.in_progress_list = in_progress_layout[1]
        self.done_list = done_layout[1]

        # Setze Drag-and-Drop für die Listen
        self.enable_drag_and_drop(self.backlog_list)
        self.enable_drag_and_drop(self.in_progress_list)
        self.enable_drag_and_drop(self.done_list)

        # Füge Spalten dem Board hinzu
        board_layout = QHBoxLayout()
        board_layout.addLayout(backlog_layout[0])
        board_layout.addLayout(in_progress_layout[0])
        board_layout.addLayout(done_layout[0])

        main_layout.addLayout(board_layout)

    def create_column(self, title, add_task_callback):
        """Erstellt eine Kanban-Spalte mit Titel, Liste und Hinzufügen-Button."""
        layout = QVBoxLayout()
        label = QLabel(title)
        label.setAlignment(Qt.AlignmentFlag.AlignCenter)
        task_list = QListWidget()
        add_task_button = QPushButton(f"Task zu {title} hinzufügen")
        add_task_button.clicked.connect(add_task_callback)

        layout.addWidget(label)
        layout.addWidget(task_list)
        layout.addWidget(add_task_button)

        return layout, task_list

    def enable_drag_and_drop(self, task_list):
        """Aktiviert Drag-and-Drop-Funktionalität für eine Liste."""
        task_list.setSelectionMode(QListWidget.SelectionMode.SingleSelection)
        task_list.setDragEnabled(True)
        task_list.setAcceptDrops(True)
        task_list.setDropIndicatorShown(True)

    def add_task_to_backlog(self):
        self.add_task(self.backlog_list)

    def add_task_to_in_progress(self):
        self.add_task(self.in_progress_list)

    def add_task_to_done(self):
        self.add_task(self.done_list)

    def add_task(self, task_list):
        """Öffnet einen Dialog zum Hinzufügen einer Aufgabe."""
        task, ok = QInputDialog.getText(self, "Task hinzufügen", "Geben Sie den Namen des Tasks ein:")
        if ok and task:
            task_item = QListWidgetItem(task)
            task_item.setFlags(task_item.flags() | Qt.ItemFlag.ItemIsDragEnabled)
            task_list.addItem(task_item)


if __name__ == "__main__":
    app = QApplication(sys.argv)
    kanban_board = KanbanBoard()
    kanban_board.show()
    sys.exit(app.exec())
```

---

### **Funktionen des Codes**

1. **Drei Spalten:**
   - Backlog, In Progress und Done werden als `QListWidget` angezeigt.
   - Jede Spalte enthält eine Liste und einen Button, um Aufgaben hinzuzufügen.

2. **Task hinzufügen:**
   - Durch einen Klick auf den Button wird ein Eingabedialog geöffnet, um einen neuen Task hinzuzufügen.

3. **Drag-and-Drop:**
   - Aufgaben können durch Drag-and-Drop zwischen den Spalten verschoben werden (`setDragEnabled`, `setAcceptDrops`, `setDropIndicatorShown`).

4. **Interaktive Aufgaben:**
   - Aufgaben werden als `QListWidgetItem`-Elemente dargestellt und können leicht angepasst werden.

---

### **Benötigte Bibliotheken**
Installiere die benötigten Pakete, falls sie nicht vorhanden sind:
```bash
pip install PyQt6
```

---

### **Mögliche Erweiterungen**
1. **Speichern und Laden:**
   - Implementiere die Speicherung der Aufgaben in einer JSON-Datei oder Datenbank (z. B. SQLite).
2. **Styling:**
   - Verwende Stylesheets (`setStyleSheet`) für ein ansprechenderes Design.
3. **Kontextmenü:**
   - Füge ein Kontextmenü hinzu, um Aufgaben zu bearbeiten oder zu löschen.
4. **Detailansicht:**
   - Öffne beim Doppelklick auf eine Aufgabe ein Fenster, um Details zu bearbeiten.

---

### **Ausführung**
1. Speichere den Code in einer Datei `kanban_board.py`.
2. Führe die Datei aus:
   ```bash
   python kanban_board.py
   ```
3. Interagiere mit dem Kanban-Board, füge Aufgaben hinzu und verschiebe sie zwischen den Spalten.

Dieses Grundgerüst kann leicht an deine spezifischen Anforderungen angepasst werden.

Hier ist ein vollständiges Beispiel für ein interaktives Kanban-Board, das alle von Ihnen genannten Anforderungen in **PyQt6** implementiert:

---

### **Python-Code**

```python
import sys
from PyQt6.QtWidgets import (
    QApplication, QWidget, QVBoxLayout, QHBoxLayout,
    QLabel, QListWidget, QPushButton, QInputDialog, QListWidgetItem, QDialog,
    QFormLayout, QLineEdit, QComboBox, QDateEdit, QTextEdit
)
from PyQt6.QtCore import Qt, QDate


class Task:
    """Repräsentiert eine Aufgabe mit Eigenschaften."""
    def __init__(self, name, estimated_pomos=0, date_to_perform=None,
                 repeat="never", assigned_to_project="", tag="", subtasks=""):
        self.name = name
        self.estimated_pomos = estimated_pomos
        self.date_to_perform = date_to_perform or QDate.currentDate()
        self.repeat = repeat
        self.assigned_to_project = assigned_to_project
        self.tag = tag
        self.subtasks = subtasks


class TaskDialog(QDialog):
    """Dialogfenster zur Bearbeitung der Eigenschaften einer Aufgabe."""
    def __init__(self, task: Task, parent=None):
        super().__init__(parent)
        self.setWindowTitle("Task-Eigenschaften bearbeiten")
        self.task = task
        self.init_ui()

    def init_ui(self):
        layout = QFormLayout(self)

        # Felder für die Eigenschaften der Aufgabe
        self.name_edit = QLineEdit(self.task.name)
        self.estimated_pomos_edit = QLineEdit(str(self.task.estimated_pomos))
        self.date_to_perform_edit = QDateEdit(self.task.date_to_perform)
        self.date_to_perform_edit.setCalendarPopup(True)

        self.repeat_edit = QComboBox()
        self.repeat_edit.addItems(["never", "day", "week", "month"])
        self.repeat_edit.setCurrentText(self.task.repeat)

        self.assigned_to_project_edit = QLineEdit(self.task.assigned_to_project)
        self.tag_edit = QLineEdit(self.task.tag)
        self.subtasks_edit = QTextEdit(self.task.subtasks)

        layout.addRow("Taskname:", self.name_edit)
        layout.addRow("Estimated Pomos:", self.estimated_pomos_edit)
        layout.addRow("Date to Perform:", self.date_to_perform_edit)
        layout.addRow("Repeat:", self.repeat_edit)
        layout.addRow("Assigned to Project:", self.assigned_to_project_edit)
        layout.addRow("Tag:", self.tag_edit)
        layout.addRow("Subtasks:", self.subtasks_edit)

        # OK und Abbrechen Buttons
        button_layout = QHBoxLayout()
        ok_button = QPushButton("OK")
        cancel_button = QPushButton("Abbrechen")
        ok_button.clicked.connect(self.accept)
        cancel_button.clicked.connect(self.reject)
        button_layout.addWidget(ok_button)
        button_layout.addWidget(cancel_button)
        layout.addRow(button_layout)

    def accept(self):
        """Aktualisiert die Aufgabe mit den eingegebenen Werten."""
        self.task.name = self.name_edit.text()
        self.task.estimated_pomos = int(self.estimated_pomos_edit.text())
        self.task.date_to_perform = self.date_to_perform_edit.date()
        self.task.repeat = self.repeat_edit.currentText()
        self.task.assigned_to_project = self.assigned_to_project_edit.text()
        self.task.tag = self.tag_edit.text()
        self.task.subtasks = self.subtasks_edit.toPlainText()
        super().accept()


class KanbanBoard(QWidget):
    """Das Hauptfenster mit dem Kanban-Board."""
    def __init__(self):
        super().__init__()
        self.setWindowTitle("Kanban Board")
        self.resize(900, 500)
        self.tasks = {}
        self.setup_ui()

    def setup_ui(self):
        # Hauptlayout
        main_layout = QVBoxLayout(self)

        # Board-Spalten
        backlog_layout = self.create_column("Backlog", self.add_task_to_backlog)
        in_progress_layout = self.create_column("In Progress", self.add_task_to_in_progress)
        done_layout = self.create_column("Done", self.add_task_to_done)

        # Zugriff auf die Listen
        self.backlog_list = backlog_layout[1]
        self.in_progress_list = in_progress_layout[1]
        self.done_list = done_layout[1]

        # Setze Drag-and-Drop für die Listen
        self.enable_drag_and_drop(self.backlog_list)
        self.enable_drag_and_drop(self.in_progress_list)
        self.enable_drag_and_drop(self.done_list)

        # Füge Spalten dem Board hinzu
        board_layout = QHBoxLayout()
        board_layout.addLayout(backlog_layout[0])
        board_layout.addLayout(in_progress_layout[0])
        board_layout.addLayout(done_layout[0])

        main_layout.addLayout(board_layout)

    def create_column(self, title, add_task_callback):
        """Erstellt eine Kanban-Spalte mit Titel, Liste und Hinzufügen-Button."""
        layout = QVBoxLayout()
        label = QLabel(title)
        label.setAlignment(Qt.AlignmentFlag.AlignCenter)
        task_list = QListWidget()
        add_task_button = QPushButton(f"Task zu {title} hinzufügen")
        add_task_button.clicked.connect(add_task_callback)

        layout.addWidget(label)
        layout.addWidget(task_list)
        layout.addWidget(add_task_button)

        task_list.itemDoubleClicked.connect(self.open_task_dialog)

        return layout, task_list

    def enable_drag_and_drop(self, task_list):
        """Aktiviert Drag-and-Drop-Funktionalität für eine Liste."""
        task_list.setSelectionMode(QListWidget.SelectionMode.SingleSelection)
        task_list.setDragEnabled(True)
        task_list.setAcceptDrops(True)
        task_list.setDropIndicatorShown(True)
        task_list.setDefaultDropAction(Qt.DropAction.MoveAction)
        task_list.viewport().setAcceptDrops(True)
        task_list.setDragDropMode(QListWidget.DragDropMode.InternalMove)

    def add_task(self, task_list):
        """Öffnet einen Dialog zum Hinzufügen einer Aufgabe."""
        task_name, ok = QInputDialog.getText(self, "Task hinzufügen", "Geben Sie den Namen des Tasks ein:")
        if ok and task_name:
            task = Task(name=task_name)
            self.tasks[task_name] = task
            task_item = QListWidgetItem(task_name)
            task_list.addItem(task_item)

    def add_task_to_backlog(self):
        self.add_task(self.backlog_list)

    def add_task_to_in_progress(self):
        self.add_task(self.in_progress_list)

    def add_task_to_done(self):
        self.add_task(self.done_list)

    def open_task_dialog(self, item):
        """Öffnet das Eigenschaftenfenster für eine Aufgabe."""
        task_name = item.text()
        task = self.tasks.get(task_name)
        if task:
            dialog = TaskDialog(task, self)
            if dialog.exec():
                item.setText(task.name)
                self.tasks.pop(task_name)
                self.tasks[task.name] = task


if __name__ == "__main__":
    app = QApplication(sys.argv)
    kanban_board = KanbanBoard()
    kanban_board.show()
    sys.exit(app.exec())
```

---

### **Features dieses Codes**

1. **Spalten mit Drag-and-Drop:**
   - Aufgaben können durch Drag-and-Drop zwischen den Spalten verschoben werden.

2. **Eigenschaften-Dialog:**
   - Ein Doppelklick auf eine Aufgabe öffnet ein Fenster, in dem alle Eigenschaften angezeigt und bearbeitet werden können.

3. **Task-Hinzufügen:**
   - Neue Aufgaben können über Buttons in jede Spalte hinzugefügt werden.

4. **Datenmodell:**
   - Jede Aufgabe ist ein eigenes `Task`-Objekt, das in einem Wörterbuch (`self.tasks`) gespeichert wird.

5. **Intuitive Benutzeroberfläche:**
   - Die Spalten und Aufgaben sind leicht erweiterbar und einfach zu bedienen.

---

### **Voraussetzungen**

Installiere die PyQt6-Bibliothek:
```bash
pip install PyQt6
```

---

### **Erweiterungen**
1. **Datenpersistenz:** Speichere die Aufgaben in einer JSON-Datei oder Datenbank und lade sie beim Start.
2. **Styling:** Verwende Stylesheets (`setStyleSheet`) für ein ansprechendes Design.
3. **Subtasks:** Implementiere eine hierarchische Ansicht für Subtasks.

Mit diesem Code haben Sie ein voll funktionsfähiges interaktives Kanban-Board. Viel Erfolg beim weiteren Ausbau!